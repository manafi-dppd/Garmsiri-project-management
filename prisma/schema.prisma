generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.sqlite"
}

model Menu {
  id               Int                @id @default(autoincrement())
  title            String
  title_fa         String
  active           Boolean
  general          Boolean
  slug             String             @unique
  parentId         Int?
  AccessLevel      AccessLevel[]
  invitationAccess InvitationAccess[]
  parent           Menu?              @relation("ParentChild", fields: [parentId], references: [id])
  children         Menu[]             @relation("ParentChild")
  userAccess       UserAccess[]

  @@index([id])
  @@index([parentId])
  @@index([slug])
}

model Position {
  id           Int                    @id @default(autoincrement())
  title        String
  title_fa     String
  req_license  Boolean                @default(false)
  accessLevels AccessLevel[]
  invitations  PositionOnInvitation[]
  users        PositionOnUser[]
}

model AccessLevel {
  id         Int      @id @default(autoincrement())
  positionId Int
  menuId     Int
  hasAccess  Boolean  @default(false)
  menu       Menu     @relation(fields: [menuId], references: [id])
  position   Position @relation(fields: [positionId], references: [id])
}

model Invitation {
  id               Int                    @id @default(autoincrement())
  firstName        String?
  lastName         String
  mobile           String                 @unique
  endDate          DateTime?
  gender           String?
  username         String                 @unique
  password         String
  createdAt        DateTime               @default(now())
  userId           Int?
  introdPathLetter String?
  letterIssuer     String?
  letterNumber     String?
  letterDate       String?
  letterApprover   String?
  isRegistered     Boolean                @default(false)
  user             User?                  @relation(fields: [userId], references: [id])
  accessLevels     InvitationAccess[]
  positions        PositionOnInvitation[]
}

model PositionOnInvitation {
  id           Int        @id @default(autoincrement())
  invitationId Int
  positionId   Int
  Position     Position   @relation(fields: [positionId], references: [id])
  Invitation   Invitation @relation(fields: [invitationId], references: [id])
}

model InvitationAccess {
  id           Int        @id @default(autoincrement())
  invitationId Int
  menuId       Int
  hasAccess    Boolean
  Menu         Menu       @relation(fields: [menuId], references: [id])
  Invitation   Invitation @relation(fields: [invitationId], references: [id])
}

model User {
  id               Int              @id @default(autoincrement())
  first_name       String
  last_name        String
  phone            String           @unique
  email            String?          @unique
  gender           String
  position         String
  inviterId        Int?
  invitationTime   DateTime
  registrationTime DateTime         @default(now())
  expirationDate   DateTime?
  active           Boolean          @default(true)
  introdPathLetter String?
  letterIssuer     String?
  letterNumber     String?
  letterDate       String?
  letterApprover   String?
  userName         String           @unique
  password         String
  invitations      Invitation[]
  positions        PositionOnUser[]
  accessLevels     UserAccess[]
  loginHistories   UserLoginHistory[] // رابطه با UserLoginHistory
}

model PositionOnUser {
  id         Int      @id @default(autoincrement())
  userId     Int
  positionId Int
  user       User     @relation(fields: [userId], references: [id])
  Position   Position @relation(fields: [positionId], references: [id])
}

model UserAccess {
  id        Int     @id @default(autoincrement())
  userId    Int
  menuId    Int
  hasAccess Boolean
  Menu      Menu    @relation(fields: [menuId], references: [id])
  user      User    @relation(fields: [userId], references: [id])
}

model UserLoginHistory {
  id          Int      @id @default(autoincrement())
  userId      Int
  loginTime   DateTime @default(now())
  logoutTime  DateTime?
  ipAddress   String?
  deviceInfo  String?
  userAgent   String?
  status      String

  User        User     @relation(fields: [userId], references: [id])
}