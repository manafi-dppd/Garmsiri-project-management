import React, {useState, useEffect} from 'react';
// import "bootstrap/dist/css/bootstrap.min.css";
import {Link} from 'react-router-dom';
// import AccessLevelModal from "./AccessLevelModal"; // Import the AccessLevelModal component
// import DatePickerModal from "./DatePickerModal"; // Import the DatePickerModal component
// import useAccessLevelEffect from "./useAccessLevelEffect";
// import Header from "../../../header";
// import { getAccessLevelsForPosition } from "./useAccessLevelEffect"; // مسیر درست فایل را جایگزین کنید
// import moment from "moment-jalaali"; // برای مدیریت تاریخ شمسی
interface InvitationModalProps {
  show: boolean;
  onClose: () => void;
  onSubmit: () => void;
  onAccessLevelsUpdate: (updatedLevels: any) => void;
  onAccessLevelSubmit: (submittedData: any) => void;
}

const InvitationModal: React.FC<InvitationModalProps> = ({
  show,
  onClose,
  onSubmit,
  onAccessLevelsUpdate,
  onAccessLevelSubmit,
}) => {
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    phoneNumber: '',
    endDate: '',
    position: [],
    gender: '',
    file: null,
    issuer: '',
    letterNumber: '',
    letterDate: '',
    confirmer: '',
  });
  const [checkedState, setCheckedState] = useState({});
  const [disabledState, setDisabledState] = useState({});

  // فراخوانی useAccessLevelEffect
  //   useAccessLevelEffect(formData.position, setCheckedState, setDisabledState);
  const [isAccessLevelButtonDisabled, setIsAccessLevelButtonDisabled] =
    useState(true);

  const [showFileInput, setShowFileInput] = useState(false);
  const [showAdditionalInputs, setShowAdditionalInputs] = useState(false);
  const [listSize, setListSize] = useState(4);
  const [accessLevels, setAccessLevels] = useState({});
  const [selectedPosition, setSelectedPosition] = useState(''); // ذخیره وضعیت انتخاب شده از لیست "سمت"
  const [isAccessLevelModalOpen, setAccessLevelModalOpen] = useState(false);
  const [showDatePickerModal, setShowDatePickerModal] = useState(false);
  const [showAccessLevelModal, setShowAccessLevelModal] = useState(false); // State to control the AccessLevelModal
  const [finalAccessLevel, setFinalAccessLevel] = useState({});
  const today = new Date().toISOString().split('T')[0];

  const openAccessLevelModal = () => {
    setAccessLevelModalOpen(true);
    setShowAccessLevelModal(true); // باز کردن پنجره "سطح دسترسی"
  };

  const [newAccessLevels, setNewAccessLevels] = useState(null);
  const [selectedOption, setSelectedOption] = useState(''); // ذخیره مقدار انتخاب‌شده در اینجا

  const handleChange = (e) => {
    const {name, value, type, selectedOptions, files} = e.target;

    if (type === 'select-multiple') {
      setAccessLevels(e);
      const options = Array.from(selectedOptions).map((option) => option.value);
      setFormData((prevData) => ({
        ...prevData,
        [name]: options, // به‌روزرسانی صحیح position برای multiple select
      }));

      setIsAccessLevelButtonDisabled(false);
      const isAdminSelected = options.includes('ادمین وبسایت');
      setIsAccessLevelButtonDisabled(isAdminSelected);

      const specialOptions = [
        'نماینده آب منطقه‌ای',
        'نماینده آببران ذهاب جنوبی',
        'نماینده آببران حومه قراویز',
        'نماینده آببران بشیوه',
        'نماینده آببران قلعه شاهین',
        'نماینده آببران جگرلوی جنوبی',
        'متقاضی مجوزدار',
      ];
      const hasSpecialOption = options.some((option) =>
        specialOptions.includes(option),
      );
      setShowFileInput(hasSpecialOption);
      setShowAdditionalInputs(hasSpecialOption);

      // بروز رسانی selectedPosition
      setSelectedPosition(options[0]);

      // بروز رسانی سطح دسترسی‌ها
      setSelectedOption(e); // ذخیره گزینه انتخابی
      const newAccessLevels = getAccessLevelsForPosition(options[0]);
      setCheckedState(newAccessLevels);

      setNewAccessLevels(newAccessLevels); // ذخیره access levels در state
      console.log('Access Levels in handleChange:', newAccessLevels);
    } else if (type === 'file') {
      setFormData((prevData) => ({
        ...prevData,
        [name]: files[0],
      }));
    } else {
      // تنظیم مقدار value به صورت مستقیم برای سایر ورودی‌ها
      setFormData((prevData) => ({
        ...prevData,
        [name]: value,
      }));
    }
  };

  // Inside InvitationModal component
  const handleAccessLevelSubmit = (checkedState) => {
    setCheckedState(checkedState); // Update the access level state
    console.log('Updated Access Levels:', checkedState);
    // You can trigger additional logic here based on the updated access levels
  };
  useEffect(() => {
    if (show) {
      setFormData({
        firstName: '',
        lastName: '',
        phoneNumber: '',
        endDate: '',
        position: [],
        gender: '',
        file: null,
        issuer: '',
        letterNumber: '',
        letterDate: '',
        confirmer: '',
      });
      setCheckedState({});
      setDisabledState({});
      setNewAccessLevels(null);
    }
  }, [show]);
  useEffect(() => {
    if (checkedState && Object.keys(checkedState).length > 0) {
      console.log(
        'Access Levels from InvitationModal (after checkedState update):',
        checkedState,
      );

      // ارسال checkedState به Header بعد از به‌روزرسانی
      setCheckedState(checkedState);
    }
  }, [checkedState]); // هرگاه checkedState تغییر کرد، این اثر اجرا می‌شود.

  const handleSizeChange = (e) => {
    setListSize(Number(e.target.value));
  };

  const isFormValid = () => {
    const {
      lastName,
      phoneNumber,
      gender,
      position,
      file,
      issuer,
      letterNumber,
      letterDate,
      confirmer,
    } = formData;

    const basicValid = lastName && phoneNumber && position.length > 0;

    const specialOptionsSelected = [
      'نماینده آب منطقه‌ای',
      'نماینده آببران ذهاب جنوبی',
      'نماینده آببران حومه قراویز',
      'نماینده آببران بشیوه',
      'نماینده آببران قلعه شاهین',
      'نماینده آببران جگرلوی جنوبی',
      'متقاضی مجوزدار',
    ].some((option) => position.includes(option));

    if (specialOptionsSelected) {
      return (
        basicValid && file && issuer && letterNumber && letterDate && confirmer
      );
    }

    return basicValid;
  };

  const handleSubmit = (e) => {
    // Optionally close the modal or perform other actions
    e.preventDefault();
    if (isFormValid()) {
      onSubmit(formData);
    }
    console.log('Selected Access Levels: ', accessLevels);
    if (newAccessLevels) {
      //   Header.setFinalAccessLevel(checkedState); // پاس دادن به Header
      //   console.log("Access Levels submitted to Header:", checkedState);
    } else {
      console.error('No access levels set. Please select an option first.');
    }
  };

  const modalClass = showAdditionalInputs ? 'modal-lg' : 'modal-md';

  const toggleAccessLevelModal = () => {
    setShowAccessLevelModal((prevState) => !prevState);
  };

  const toggleDatePickerModal = () => {
    setShowDatePickerModal((prevState) => !prevState);
  };

  const handleDateSelect = (date) => {
    setFormData((prevData) => ({
      ...prevData,
      letterDate: date,
    }));
  };

  const toPersianDate = (dateString) => {
    return new Date(dateString).toLocaleDateString('fa-IR', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
    });
  };

  // const updateAccessLevels = (levels) => {
  //   console.log("Checkbox States:", levels);
  // };

  return (
    <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
      <div className="bg-white rounded-lg shadow-lg p-6 w-96">
        {/* <div className="modal-content"> */}
        {/* <div className="modal-header"> */}
        <h5 className="text-xl font-semibold mb-4">دعوتنامه</h5>
        <button
          type="button"
          className="btn-close ms-auto"
          onClick={onClose}
          style={{position: 'absolute', left: '10px'}} // تنظیم مکان دقیق دکمه
        ></button>
        {/* </div> */}
        <div className="modal-body bg-gray-50 p-6 rounded-md">
          <div className="container mx-auto">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div
                className={`col-span-1 ${showAdditionalInputs ? 'md:col-span-1' : 'md:col-span-2'}`}
              >
                <form onSubmit={handleSubmit} className="text-right space-y-4">
                  <div>
                    <label
                      htmlFor="firstName"
                      className="block text-sm font-medium text-gray-700"
                    >
                      نام
                    </label>
                    <input
                      type="text"
                      id="firstName"
                      name="firstName"
                      value={formData.firstName}
                      onChange={handleChange}
                      required
                      className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 text-right"
                    />
                  </div>

                  <div>
                    <label
                      htmlFor="lastName"
                      className="block text-sm font-medium text-gray-700"
                    >
                      نام خانوادگی
                    </label>
                    <input
                      type="text"
                      id="lastName"
                      name="lastName"
                      value={formData.lastName}
                      onChange={handleChange}
                      required
                      className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 text-right"
                    />
                  </div>

                  <div>
                    <label
                      htmlFor="phoneNumber"
                      className="block text-sm font-medium text-gray-700"
                    >
                      تلفن همراه
                    </label>
                    <input
                      type="tel"
                      id="phoneNumber"
                      name="phoneNumber"
                      value={formData.phoneNumber}
                      onChange={handleChange}
                      required
                      className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 text-right"
                    />
                  </div>

                  <div>
                    <label
                      htmlFor="endDate"
                      className="block text-sm font-medium text-gray-700"
                    >
                      تاریخ پایان عضویت: {toPersianDate(formData.endDate) || ''}
                    </label>
                    <input
                      type="date"
                      id="endDate"
                      name="endDate"
                      value={formData.endDate || ''}
                      onChange={handleChange}
                      min={today}
                      className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 text-right"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      جنسیت:
                    </label>
                    <div className="flex items-center space-x-4">
                      <div className="flex items-center">
                        <input
                          id="male"
                          name="gender"
                          value="مرد"
                          type="radio"
                          checked={formData.gender === 'مرد'}
                          onChange={handleChange}
                          required
                          className="h-4 w-4 text-indigo-600 border-gray-300 focus:ring-indigo-500"
                        />
                        <label
                          htmlFor="male"
                          className="ml-2 text-sm text-gray-700"
                        >
                          مرد
                        </label>
                      </div>
                      <div className="flex items-center">
                        <input
                          id="female"
                          name="gender"
                          value="زن"
                          type="radio"
                          checked={formData.gender === 'زن'}
                          onChange={handleChange}
                          required
                          className="h-4 w-4 text-indigo-600 border-gray-300 focus:ring-indigo-500"
                        />
                        <label
                          htmlFor="female"
                          className="ml-2 text-sm text-gray-700"
                        >
                          زن
                        </label>
                      </div>
                    </div>
                  </div>

                  <div className="flex items-start space-x-4">
                    <div className="flex-grow">
                      <label
                        htmlFor="position"
                        className="block text-sm font-medium text-gray-700"
                      >
                        سمت
                      </label>
                      <select
                        id="position"
                        name="position"
                        value={formData.position}
                        onChange={handleChange}
                        multiple
                        size={listSize}
                        required
                        className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 text-right"
                      >
                        {/* گزینه‌های سمت */}
                        {[
                          'ادمین وبسایت',
                          'مدیر بهره‌برداری',
                          'مدیران مرتبط آب نیرو',                          
                           ' مدیران مرتبط وزارت نیرو',
                          'ناظر برق و پمپاژ',
                          'نماینده اجرا',
                          'اپراتور سد',
                          'اپراتور سامانه',
                          'سرپرست مجموعه اول پمپاژ',
                          'سرپرست مجموعه دوم پمپاژ',
                          'اپراتور مجموعه اول پمپاژ',
                          'اپراتور مجموعه دوم پمپاژ',
                           ' اپراتور مجموعه دوم پمپاژ',
                          'اپراتور شبکه',
                          'مسئول اداری',
                          'مسئول حراست',
                          'نگهبان سامانه',
                          'نگهبان شبکه',
                          'نماینده حقوق',
                          'انباردار',
                          'نماینده آب منطقه‌ای',
                          'نماینده آببران ذهاب جنوبی',
                          'نماینده آببران حومه قراویز',
                          'نماینده آببران بشیوه',
                          'نماینده آببران قلعه شاهین',
                          'نماینده آببران جگرلوی جنوبی',
                          'متقاضی مجوزدار',
                        ].map((option) => (
                          <option key={option} value={option}>
                            {option}
                          </option>
                        ))}
                      </select>
                    </div>
                    <div className="w-20">
                      <label
                        htmlFor="listSize"
                        className="block text-sm font-medium text-gray-700"
                      >
                        اندازه
                      </label>
                      <input
                        type="number"
                        id="listSize"
                        name="listSize"
                        value={listSize}
                        onChange={handleSizeChange}
                        min="1"
                        max="20"
                        required
                        className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 text-right"
                      />
                    </div>
                  </div>

                  <div>
                    <button
                      type="button"
                      onClick={openAccessLevelModal}
                      disabled={isAccessLevelButtonDisabled}
                      className="w-full py-2 px-4 bg-indigo-600 text-white rounded-md shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                    >
                      ویرایش سطح دسترسی
                    </button>
                  </div>
                </form>
              </div>

              {showAdditionalInputs && (
                <div className="bg-white border border-gray-300 rounded-md p-4 shadow-md">
                  {/* فرم اضافی */}
                  <form className="space-y-4">{/* سایر ورودی‌ها */}</form>
                </div>
              )}
            </div>
          </div>
        </div>

        <div className="modal-footer">
          <button
            type="button"
            className="px-4 py-2 bg-red-500 text-white rounded-lg shadow-md hover:bg-red-600 focus:outline-none focus:ring-2 focus:ring-red-400"
            onClick={onClose}
          >
            انصراف
          </button>
          <button
            type="submit"
            className="px-4 py-2 bg-green-500 text-white rounded-lg shadow-md hover:bg-green-600 focus:outline-none focus:ring-2 focus:ring-green-400"
            disabled={!isFormValid()}
            onClick={handleSubmit}
          >
            ارسال دعوتنامه
          </button>
        </div>
        {/* </div> */}
      </div>
      {showDatePickerModal && (
        <DatePickerModal
          show={showDatePickerModal}
          onClose={toggleDatePickerModal}
          onDateSelect={handleDateSelect}
          selectedDate={formData.letterDate}
        />
      )}
      {showAccessLevelModal && (
        <AccessLevelModal
          show={showAccessLevelModal}
          onClose={() => setShowAccessLevelModal(false)}
          onAccessLevelSubmit={handleAccessLevelSubmit}
          selectedPosition={selectedPosition} // انتقال وضعیت انتخاب شده
          updateAccessLevels={(checkedState) => {
            setFinalAccessLevel(checkedState);
            console.log('Updated Access Levels:', checkedState);
          }}
        />
      )}
    </div>
  );
};

export default InvitationModal;
